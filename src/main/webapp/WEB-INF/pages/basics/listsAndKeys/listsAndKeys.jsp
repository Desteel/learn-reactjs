<%@ page contentType="text/html;charset=UTF-8" language="java" %>

<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@taglib prefix="lt" tagdir="/WEB-INF/tags/layout" %>
<%@taglib prefix="wg" tagdir="/WEB-INF/tags/widget" %>
<%@taglib prefix="ce" tagdir="/WEB-INF/tags/application/basics/lists-and-keys" %>
<%@taglib prefix="app" tagdir="/WEB-INF/tags/application" %>

<a name="pageStart"></a>
<div class="black-line"></div>
<div class="page lists-and-keys-page">
	<h1>2.9	Списки и ключи</h1>

	<br/>

	<p class="introduction">
		Прежде всего давайте посмотрим как можно преобразовывать списки в JavaScript.
	</p>

	<p>В примере ниже мы используем функцию <code>map()</code>, чтобы принять массив
		<code>numbers</code> и помножить все его значения на 10. Мы присваиваем переменной
		<code>result</code> новый массив, который возвращает метод <code>map()</code>, и выводим её в лог:</p>

	<ce:code-example-1/>

	<p>Этот код логирует  [10, 20, 30, 40, 50, 60, 70, 80, 90] в консоль</p>

	<p>В React преобразование массивов в списки элементов почти идентично.</p>

	<br/>
	<br/>
	<div class="gray-line"></div>
	<h2>2.9.1 Отрисовка группы компонентов</h2>
	<br/>

	<p>В React вы можете создавать коллекции элементов и включать их в JSX. Для
		этого нужно использовать фигурные скобки <code>{}</code>.</p>

	<p>В примере кода ниже, мы в цикле проходимся по массиву <code>users</code>, используя JavaScript-функцию
		<code>map()</code>. Мы возвращаем элемент <code>&lt;li&gt;</code> для каждого элемента
		массива. В итоге мы присваиваем результирующий массив элементов переменной <code>items</code>:</p>

	<ce:code-example-2/>

	<p>Далее мы заключаем весь массив React-элементов <code>items</code> внутри элемента
		<code>&lt;ul&gt;</code> и отрисовываем его в DOM:</p>

	<ce:code-example-3 codePenUrl="https://codepen.io/stzidane/pen/dRPBvN?editors=0010"/>

	<p>Этот код отображает маркированный список всех пользователей.</p>

	<br/>
	<br/>
	<div class="gray-line"></div>
	<h2>2.9.2 Базовый компонент списка</h2>
	<br/>

	<p>Обычно в приложениях мы отрисовываем списки внутри какого-нибудь компонента.</p>

	<p>Давайте отрефакторим предыдущий пример, выделив компонент, который
		принимает массив <code>users</code> и выводит несортированный список элементов:</p>

	<ce:code-example-4/>

	<p>Когда вы выполните этот код, то получите предупреждение, что для списка элементов должен быть
		предоставлен ключ <code>key</code>. «Keys» - это специальные строковые атрибуты, которые
		вам нужно добавить, создавая список элементов. Почему это так важно, мы обсудим в следующем разделе.</p>

	<p>Давайте присвоим ключ <code>key</code> к элементам нашего списка внутри <code>numbers.map()</code> и
		исправим проблему пропущенных ключей:</p>

	<ce:code-example-5 codePenUrl="https://codepen.io/stzidane/pen/dRPBWv?editors=0010"/>

	<br/>
	<br/>
	<div class="gray-line"></div>
	<h2>2.9.3 Ключи</h2>
	<br/>

	<p>Ключи помогают React идентифицировать, какой элемент был изменен, добавлен или удален.
		Ключи должны быть предоставлены элементам внутри массива, чтобы дать им
		стабильную идентифицируемость:</p>

	<ce:code-example-6/>

	<p>Лучший способ выбрать ключи – использовать строку, которая уникально  идентифицирует
		элемент списка среди его соседей. В связи с этим, в качестве ключа вам следует использовать
		ID из ваших данных, принятых с сервера:</p>

	<ce:code-example-7/>

	<p>В крайнем случае, когда у вас нет стабильных ID для отрисовки элементов, вы
		можете использовать как ключ индекс элемента:</p>

	<ce:code-example-8/>

	<c:url var="reconciliationUrl" value="/core/reconciliation"/>
	<p>Мы не рекомендуем использовать индексы в качестве ключей, если элементы могут быть
		переупорядочены, так как такая операция будет выполняться медленно. Если вам интересно, то можете
		прочитать <b><a href="${reconciliationUrl}#recursing-on-children">более
			глубокое объяснение</a></b> о том, почему ключи необходимы.</p>

	<br/>
	<br/>
	<div class="gray-line"></div>
	<h2>2.9.4 Выделение компонентов с ключами</h2>
	<br/>

	<p>Ключи имеют смысл только в контексте окружающего массива.</p>

	<p>
		К примеру, если вы выделяете компонент <code>UserItem</code>, вам следует поставить
		ключи на все элементы <code>&lt;UserItem /&gt;</code>, а не на дочерние
		элементы <code>&lt;li&gt;</code>.
	</p>

	<p>Пример <b>неправильного</b> использования ключей:</p>

	<ce:code-example-9/>

	<p>Пример <b>правильного</b> использования ключей:</p>

	<ce:code-example-10 codePenUrl="https://codepen.io/stzidane/pen/GEgbbX?editors=0010"/>

	<p>Вот хорошее эмпирическое правило: <b>элементы внутри
		вызова</b> <code>map()</code> <b>требуют ключей</b>.</p>

	<br/>
	<br/>
	<div class="gray-line"></div>
	<h2>2.9.5 Ключи должны быть уникальными только в пределах соседей</h2>
	<br/>

	<p>Ключи, связанные с определенным массивом, должны быть уникальными только в пределах своих соседей.
		Однако, они не должны быть уникальными глобально. Вы можете использовать
		те же самые ключи для двух разных массивов:</p>

	<ce:code-example-11 codePenUrl="https://codepen.io/stzidane/pen/BZyXKe?editors=0010"/>

	<p>
		Ключи служат подсказками библиотеке React для корректной отрисовки списка элементов.
		Однако они не передаются в ваши компоненты. Если вам нужно такое же значение и в вашем компоненте,
		передайте его напрямую как свойство с другим именем:
	</p>

	<ce:code-example-12/>

	<p>В примере выше, компонент <code>Message</code> видит только <code>props.id</code>,
		но не <code>props.key</code>.</p>

	<br/>
	<br/>
	<div class="gray-line"></div>
	<h2>2.9.6 Встраивание map() в JSX</h2>
	<br/>

	<p>В примерах выше мы объявляли отдельную переменную <code>items</code> и включали ее в JSX:</p>

	<ce:code-example-13/>

	<p>JSX позволяет встраивать в фигурные скобки любое выражение.
		Поэтому мы можем встроить результат вызова <code>map()</code>:</p>

	<ce:code-example-14/>

	<p>
		Иногда такой приём приводит к более чистому коду, но злоупотреблять этим стилем не следует.
		Как и в JavaScript, вам решать, что лучше в плане читабельности: вынесение кода в отдельную 
		переменную, либо вызов функции, как мы показали выше. Имейте в виду, что если тело <code>map()</code> 
		имеет слишком много вложений, возможно, наступило отличное время выделить компонент.
	</p>
</div>

<%-- <c:url var="Url" value=""/> --%>
<%--
    <ul>
        <li>
            <p>
            
            </p>
        </li>
    </ul>
    --%>
<%-- <app:alert title="Внимание!" type="warning"></app:alert> --%>
<%-- <code></code> --%>
<%-- <b></b> --%>
<%-- <code>&lt; &gt;</code> --%>
<%-- <b><a href="${}"></a></b> --%>
<%-- <b><a href="#"></a></b> --%>
<%-- <a href="#"></a> --%>

<c:url var="prevPageUrl" value="conditional-rendering"/>
<c:url var="nextPageUrl" value="forms"/>
<app:page-navigate prevPageUrl="${prevPageUrl}"
									 pageStartAncor="pageStart"
									 nextPageUrl="${nextPageUrl}"/>